/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.72
 * Generated at: 2016-11-22 01:28:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Map;
import java.sql.*;

public final class order_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Kyla Reid and Megan Kurz Grocery Order Processing</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		// Get customer id
		String custId = request.getParameter("customerId");
		String pass = request.getParameter("password");
		@SuppressWarnings({"unchecked"})
		HashMap<String, ArrayList<Object>> productList = (HashMap<String, ArrayList<Object>>) session.getAttribute("productList");

		Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
		Connection con = null; 
		String url = "jdbc:sqlserver://sql04.ok.ubc.ca:1433;DatabaseName=db_kreid;"; 
		String uid = "kreid";
		String pw = "39265137"; 


		try { 
		con = DriverManager.getConnection(url, uid, pw); 
			if(productList.isEmpty()){
		out.println("<h2>Your shopping cart is empty please go back tp previos page and try again</h2>");}
			else{
			if(custId.matches("[0-9]+")){
		String SQL = "select customerId, cname, password from Customer where customerId=?";
		PreparedStatement pstmt = con.prepareStatement(SQL); 
		pstmt.setString(1, custId);
		ResultSet rst = pstmt.executeQuery();
		if(rst.next()){
			if(pass.equals(rst.getString(3))){
			String order = "INSERT INTO Orders (customerId) VALUES (?)";
			PreparedStatement pstmt1 = con.prepareStatement(order, Statement.RETURN_GENERATED_KEYS);
			pstmt1.setString(1,custId);
			pstmt1.executeUpdate();
			ResultSet keys = pstmt1.getGeneratedKeys();
			keys.next();
			int orderId = keys.getInt(1);
			double total = 0;
			
			Iterator<Map.Entry<String, ArrayList<Object>>> iterator = productList.entrySet().iterator();
			out.println("<h1>Your Order Summary</h1>");
			out.println("<table><tr><td>Product Id</td><td>Product Name</td><td>Quantity</td><td>Price</td><td>Subtotal</td></tr>");
			while (iterator.hasNext()){ 
		Map.Entry<String, ArrayList<Object>> entry = iterator.next();
		ArrayList<Object> product = (ArrayList<Object>) entry.getValue();
		String productId = (String) product.get(0);
		        String price = (String) product.get(2);
		double pr = Double.parseDouble(price);
		int qty = ((Integer)product.get(3)).intValue();
		String s = "INSERT INTO OrderedProduct VALUES(?,?,?,?)";
		        PreparedStatement ps = con.prepareStatement(s);
		        ps.setInt(1,orderId);
		        ps.setString(2,productId);
		        ps.setInt(3, qty);
		        ps.setDouble(4, pr);
		        ps.executeUpdate();
		        total += qty*pr;
		        out.println("<tr><td>" +productId +"</td><td>"+product.get(1)+"</td><td>"+qty+"</td><td>"+pr+"</td><td>"+qty*pr+"</td></tr>");
			}
			
			out.println("<tr><td colspan='4'><b>Order Total</b></td><td>"+ total +"</td></tr></table>");
			String upOrd = "UPDATE Orders SET totalAmount = ? WHERE orderId = ?";
			PreparedStatement pord = con.prepareStatement(upOrd);
			pord.setDouble(1, total);
			pord.setInt(2, orderId);
			pord.executeUpdate();
			
			out.println("<h2>Order Completed. Will be shipped soon...</h2>");
			out.println("<h2>Your reference number is: "+orderId+"</h2>");
			out.println("<h2>Shipping to customer: "+custId+" Name: "+rst.getString("cname")+"</h2>");
		session.setAttribute("productList", null);	
		}
			else {out.println("<h1> You have entered the wrong password please go back to the previous page and try again.</h1>");}
			}
			else{out.println("<h1>Invalid customer id. Go back to the previous page and try again.</h1>");}
			}
			else{out.println("<h1>Invalid customer id. Go back to the previous page and try again.</h1>");}
		}
			}

		catch (SQLException ex) { out.println(ex); } 
		finally { 
			if (con != null) 
		try { con.close(); } 
			catch (SQLException ex) { System.err.println("SQLException: " + ex); } }


		// Determine if valid customer id was entered
		// Determine if there are products in the shopping cart
		// If either are not true, display an error message

		// Make connection

		// Save order information to database


			/*
			// Use retrieval of auto-generated keys.
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);			
			ResultSet keys = pstmt.getGeneratedKeys();
			keys.next();
			int orderId = keys.getInt(1);
			*/

		// Insert each item into OrderedProduct table using OrderId from previous INSERT

		// Update total amount for order record

		// Here is the code to traverse through a HashMap
		// Each entry in the HashMap is an ArrayList with item 0-id, 1-name, 2-quantity, 3-price

		/*
			Iterator<Map.Entry<String, ArrayList<Object>>> iterator = productList.entrySet().iterator();
			while (iterator.hasNext())
			{ 
		Map.Entry<String, ArrayList<Object>> entry = iterator.next();
		ArrayList<Object> product = (ArrayList<Object>) entry.getValue();
		String productId = (String) product.get(0);
		        String price = (String) product.get(2);
		double pr = Double.parseDouble(price);
		int qty = ( (Integer)product.get(3)).intValue();
		            ...
			}
		*/

		// Print out order summary
	
      out.write("\r\n");
      out.write("</BODY>\r\n");
      out.write("</HTML>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
